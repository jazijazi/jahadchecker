services:
  # db:
  #   image: postgis/postgis:16-3.5-alpine
  #   container_name: zarrin_postgis_db
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data
  #   env_file:
  #     - .env
  #   networks:
  #     - zarrinnet
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s
  #   restart: unless-stopped
  #   # shm_size: 256mb

  redis:
    image: redis:8.0.1-alpine
    container_name: zarrin_redis
    # ports:
      # - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    env_file:
      - .env
    networks:
      - zarrinnet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory-policy allkeys-lru

  web:
    build:
      context: ./backend
      dockerfile: ./Dockerfile.prod
      args:
        UID: ${UID}   # host UID
        GID: ${GID}   # host GID
    container_name: zarrin_web
    user: "${UID}:${GID}"
    command: ["/app/startup.sh"]
    volumes:
      - ${RASTER_ROOT}:${RASTER_ROOT} 
      - ${MEDIA_ROOT}:${MEDIA_ROOT} 
      - ${STATIC_ROOT}:${STATIC_ROOT} 
      - ${LOGS_ROOT}:${LOGS_ROOT}
      # - "/var/frontend:/var/www/zarrin"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/common/healthcheck/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    expose:
      - "8000"
    env_file:
      - .env
    networks:
      - zarrinnet
    depends_on:
      - db
      - redis

  nginx:
    image: nginx:1.28.0-alpine3.21
    container_name: zarrin_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      # - ./nginx/ssl:/etc/nginx/ssl  # For SSL certificates
      - ${RASTER_ROOT}:${RASTER_ROOT} 
      - ${MEDIA_ROOT}:${MEDIA_ROOT} 
      - ${STATIC_ROOT}:${STATIC_ROOT} 
    networks:
      - zarrinnet
    depends_on:
      - web
      - pgtile 
    restart: unless-stopped

networks:
  zarrinnet:
    name: zarrinnet
    driver: bridge

volumes:
  pgdata:
    driver: local
  redis_data:
    driver: local
